type Subaccount = opt blob;

type AssetRef = variant {
  IcpFungible : record { subaccount : Subaccount };
  IcrcFungible : record { canister : principal; subaccount : Subaccount };
  IcrcNft : record { canister : principal; token_id : nat };
  Document : record { storage_canister : principal; blob_id : vec nat8 };
  Pointer : record { description : text };
};

type Allocation = record {
  heir : principal;
  basis_points : nat;
};

type DistributionEntry = record {
  id : nat64;
  owner : principal;
  asset : AssetRef;
  allocations : vec Allocation;
  executed_at : opt nat64;
};

type BlobMeta = record {
  hash : vec nat8;
  iv : vec nat8;
  size : nat64;
  locator : text;
};

type OwnerRecord = record {
  owner : principal;
  last_active : opt nat64;
  warning_started_at : opt nat64;
  vault_subaccount : Subaccount;
};

type EventRecord = record {
  id : nat64;
  ts : nat64;
  actor : principal;
  event_type : text;
  details : text;
};

type CertificateRecord = record {
  distribution_id : nat64;
  hash : vec nat8;
  executed_at : nat64;
};

type SweepResult = record {
  processed : nat64;
  continuation : opt vec nat8;
};

service : {
  /* lifecycle */
  init : () -> ();
  pre_upgrade : () -> ();
  post_upgrade : () -> ();

  /* introspection */
  whoami : () -> (principal) query;

  /* owner APIs */
  register_owner : () -> ();
  add_heir : (principal, nat64) -> (nat64);
  remove_heir : (principal) -> (bool);
  set_allocations : (vec Allocation) -> ();
  commit_blob : (BlobMeta) -> (nat64);
  update_last_active : () -> ();
  withdraw_asset : (AssetRef, principal) -> (bool);

  /* heir APIs */
  list_claims : () -> (vec DistributionEntry) query;
  get_document_meta : (nat64) -> (opt BlobMeta) query;

  /* system/execution */
  sweep_expired : (nat64, opt vec nat8) -> (SweepResult);
  get_certificate : (nat64) -> (opt CertificateRecord) query;
  get_event_log : (nat64, nat64) -> (vec EventRecord) query;

  /* admin */
  rotate_salt : (vec nat8) -> ();

  /* candid export */
  __get_candid_interface_tmp_hack : () -> (text) query;
}
